{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = `https://likelion-cau.r-e.kr`;\n//export를 해야 함수 내에서도 컴포넌트를 불러올 수 있다\nexport const signup = async (id, pw, name, age) => {\n  const result = await axios.post(`${baseURL}/accounts/signup/`, {\n    id,\n    pw,\n    name,\n    age\n  });\n  return result;\n};\nexport const login = async (id, pw) => {\n  const result = await axios.post(`${baseURL}/accounts/login/`, {\n    id,\n    pw\n  });\n  //data는 axios 내 형식\n  return result.data;\n};\nexport const getMyPage = async token => {\n  try {\n    const response = await axios.post(`${baseURL}/account/mypage`, {\n      header: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n      try {\n        // 1. 새 토큰 발급 시도\n        const newTokens = await getNewRefreshToken();\n\n        // 2. 로컬 스토리지 업데이트\n        localStorage.setItem(\"access\", newTokens.accessToken);\n        localStorage.setItem(\"refresh\", newTokens.refreshToken);\n\n        // 3. 새 토큰으로 재요청\n        const retryResponse = await axios.get(`${baseURL}/accounts/mypage`, {\n          headers: {\n            Authorization: `Bearer ${newTokens.accessToken}`\n          }\n        });\n        return retryResponse.data;\n      } catch (refreshError) {\n        alert(\"토큰이 만료되었습니다. 다시 로그인 해주세요\");\n        throw refreshError;\n      }\n    } else {\n      throw error;\n    }\n  }\n};\nexport const getNewRefreshToken = async () => {\n  try {\n    const accessToken = localStorage.getItem(\"access\");\n    const refreshToken = localStorage.getItem(\"refresh\");\n    const result = await axios.post(`${baseURL}/accounts/refresh`, {\n      refreshToken\n    }, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    return result.data;\n  } catch (error) {\n    alert(\"토큰이 만료되었습니다. 다시 로그인 해주세요.\");\n  }\n};","map":{"version":3,"names":["axios","baseURL","signup","id","pw","name","age","result","post","login","data","getMyPage","token","response","header","Authorization","error","_error$response","status","newTokens","getNewRefreshToken","localStorage","setItem","accessToken","refreshToken","retryResponse","get","headers","refreshError","alert","getItem"],"sources":["/Users/jeong-geon/Desktop/FrontEnd_Study/Likelion13th-git/week14/src/apis/user.js"],"sourcesContent":["import axios from \"axios\";\n\nconst baseURL = `https://likelion-cau.r-e.kr`;\n//export를 해야 함수 내에서도 컴포넌트를 불러올 수 있다\nexport const signup = async (id, pw, name, age) => {\n    const result = await axios.post(`${baseURL}/accounts/signup/`, {\n        id,\n        pw,\n        name,\n        age,\n    });\n    return result;\n};\n\nexport const login = async (id, pw) => {\n    const result = await axios.post(`${baseURL}/accounts/login/`, {\n        id,\n        pw,\n    });\n    //data는 axios 내 형식\n    return result.data;\n};\n\nexport const getMyPage = async (token) => {\n    try{\n        const response = await axios.post(`${baseURL}/account/mypage`,{\n            header: {\n                Authorization: `Bearer ${token}`,\n            },\n        });\n            return response.data;\n    }\n    catch (error){\n        if(error.response?.status === 401){\n            try{\n                // 1. 새 토큰 발급 시도\n                const newTokens = await getNewRefreshToken();\n\n                // 2. 로컬 스토리지 업데이트\n                localStorage.setItem(\"access\", newTokens.accessToken);\n                localStorage.setItem(\"refresh\", newTokens.refreshToken);\n\n                // 3. 새 토큰으로 재요청\n                const retryResponse = await axios.get(`${baseURL}/accounts/mypage`,{\n                    headers: {\n                        Authorization: `Bearer ${newTokens.accessToken}`,\n                    },\n                });\n                return retryResponse.data;\n            } catch (refreshError) {\n                alert(\"토큰이 만료되었습니다. 다시 로그인 해주세요\");\n                throw refreshError;\n            }\n        }else{\n            throw error;\n        }\n    }\n};\n\nexport const getNewRefreshToken = async () => {\n    try {\n        const accessToken = localStorage.getItem(\"access\");\n        const refreshToken = localStorage.getItem(\"refresh\");\n\n        const result = await axios.post(\n            `${baseURL}/accounts/refresh`,\n            {\n                refreshToken,\n            },\n            {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                },\n            }\n        )\n            return result.data;\n    } catch (error) {\n        alert(\"토큰이 만료되었습니다. 다시 로그인 해주세요.\")\n    }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,6BAA6B;AAC7C;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,EAAE,EAAEC,EAAE,EAAEC,IAAI,EAAEC,GAAG,KAAK;EAC/C,MAAMC,MAAM,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,mBAAmB,EAAE;IAC3DE,EAAE;IACFC,EAAE;IACFC,IAAI;IACJC;EACJ,CAAC,CAAC;EACF,OAAOC,MAAM;AACjB,CAAC;AAED,OAAO,MAAME,KAAK,GAAG,MAAAA,CAAON,EAAE,EAAEC,EAAE,KAAK;EACnC,MAAMG,MAAM,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,kBAAkB,EAAE;IAC1DE,EAAE;IACFC;EACJ,CAAC,CAAC;EACF;EACA,OAAOG,MAAM,CAACG,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAOC,KAAK,IAAK;EACtC,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,iBAAiB,EAAC;MAC1Da,MAAM,EAAE;QACJC,aAAa,EAAE,UAAUH,KAAK;MAClC;IACJ,CAAC,CAAC;IACE,OAAOC,QAAQ,CAACH,IAAI;EAC5B,CAAC,CACD,OAAOM,KAAK,EAAC;IAAA,IAAAC,eAAA;IACT,IAAG,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAC;MAC9B,IAAG;QACC;QACA,MAAMC,SAAS,GAAG,MAAMC,kBAAkB,CAAC,CAAC;;QAE5C;QACAC,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,SAAS,CAACI,WAAW,CAAC;QACrDF,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEH,SAAS,CAACK,YAAY,CAAC;;QAEvD;QACA,MAAMC,aAAa,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAAC,GAAGzB,OAAO,kBAAkB,EAAC;UAC/D0B,OAAO,EAAE;YACLZ,aAAa,EAAE,UAAUI,SAAS,CAACI,WAAW;UAClD;QACJ,CAAC,CAAC;QACF,OAAOE,aAAa,CAACf,IAAI;MAC7B,CAAC,CAAC,OAAOkB,YAAY,EAAE;QACnBC,KAAK,CAAC,0BAA0B,CAAC;QACjC,MAAMD,YAAY;MACtB;IACJ,CAAC,MAAI;MACD,MAAMZ,KAAK;IACf;EACJ;AACJ,CAAC;AAED,OAAO,MAAMI,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACA,MAAMG,WAAW,GAAGF,YAAY,CAACS,OAAO,CAAC,QAAQ,CAAC;IAClD,MAAMN,YAAY,GAAGH,YAAY,CAACS,OAAO,CAAC,SAAS,CAAC;IAEpD,MAAMvB,MAAM,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAC3B,GAAGP,OAAO,mBAAmB,EAC7B;MACIuB;IACJ,CAAC,EACD;MACIG,OAAO,EAAE;QACLZ,aAAa,EAAE,UAAUQ,WAAW;MACxC;IACJ,CACJ,CAAC;IACG,OAAOhB,MAAM,CAACG,IAAI;EAC1B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZa,KAAK,CAAC,2BAA2B,CAAC;EACtC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}