{"ast":null,"code":"import axios from \"axios\";\nimport { getAuthAxios } from \"./authAxios\";\nconst baseURL = `https://likelion-cau.r-e.kr`;\n//export를 해야 함수 내에서도 컴포넌트를 불러올 수 있다\nexport const signup = async (id, pw, name, age) => {\n  const result = await axios.post(`${baseURL}/accounts/signup/`, {\n    id,\n    pw,\n    name,\n    age\n  });\n  return result;\n};\nexport const login = async (id, pw) => {\n  const result = await axios.post(`${baseURL}/accounts/login/`, {\n    id,\n    pw\n  });\n  //data는 axios 내 형식\n  return result.data;\n};\n\n//export const getMyPage = async (token) => {\n//    try{\n//        const response = await axios.post(`${baseURL}/account/mypage`,{\n//            header: {\n//                Authorization: `Bearer ${token}`,\n//            },\n//        });\n//            return response.data;\n//    }\n//    catch (error){\n//        if(error.response?.status === 401){\n//            try{\n//                // 1. 새 토큰 발급 시도\n//                const newTokens = await getNewRefreshToken();\n\n//                // 2. 로컬 스토리지 업데이트\n//                localStorage.setItem(\"access\", newTokens.accessToken);\n//                localStorage.setItem(\"refresh\", newTokens.refreshToken);\n\n//                // 3. 새 토큰으로 재요청\n//                const retryResponse = await axios.get(`${baseURL}/accounts/mypage`,{\n//                    headers: {\n//                        Authorization: `Bearer ${newTokens.accessToken}`,\n//                    },\n//                });\n//                return retryResponse.data;\n//            } catch (refreshError) {\n//                alert(\"토큰이 만료되었습니다. 다시 로그인 해주세요\");\n//                throw refreshError;\n//            }\n//        }else{\n//            throw error;\n//        }\n//    }\n//};\n\nexport const getMyPage = token => {\n  const authAxios = getAuthAxios(token);\n  const result = authAxios.get(\"/accounts/mypage\");\n  return result;\n};\nexport const getNewRefreshToken = async () => {\n  try {\n    const accessToken = localStorage.getItem(\"access\");\n    const refreshToken = localStorage.getItem(\"refresh\");\n    const result = await axios.post(`${baseURL}/accounts/refresh`, {\n      refreshToken\n    }, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    });\n    return result.data;\n  } catch (error) {\n    alert(\"토큰이 만료되었습니다. 다시 로그인 해주세요.\");\n  }\n};","map":{"version":3,"names":["axios","getAuthAxios","baseURL","signup","id","pw","name","age","result","post","login","data","getMyPage","token","authAxios","get","getNewRefreshToken","accessToken","localStorage","getItem","refreshToken","headers","Authorization","error","alert"],"sources":["/Users/jeong-geon/Desktop/FrontEnd_Study/Likelion13th-git/week14/src/apis/user.js"],"sourcesContent":["import axios from \"axios\";\nimport { getAuthAxios } from \"./authAxios\";\n\nconst baseURL = `https://likelion-cau.r-e.kr`;\n//export를 해야 함수 내에서도 컴포넌트를 불러올 수 있다\nexport const signup = async (id, pw, name, age) => {\n    const result = await axios.post(`${baseURL}/accounts/signup/`, {\n        id,\n        pw,\n        name,\n        age,\n    });\n    return result;\n};\n\nexport const login = async (id, pw) => {\n    const result = await axios.post(`${baseURL}/accounts/login/`, {\n        id,\n        pw,\n    });\n    //data는 axios 내 형식\n    return result.data;\n};\n\n//export const getMyPage = async (token) => {\n//    try{\n//        const response = await axios.post(`${baseURL}/account/mypage`,{\n//            header: {\n//                Authorization: `Bearer ${token}`,\n//            },\n//        });\n//            return response.data;\n//    }\n//    catch (error){\n//        if(error.response?.status === 401){\n//            try{\n//                // 1. 새 토큰 발급 시도\n//                const newTokens = await getNewRefreshToken();\n\n//                // 2. 로컬 스토리지 업데이트\n//                localStorage.setItem(\"access\", newTokens.accessToken);\n//                localStorage.setItem(\"refresh\", newTokens.refreshToken);\n\n//                // 3. 새 토큰으로 재요청\n//                const retryResponse = await axios.get(`${baseURL}/accounts/mypage`,{\n//                    headers: {\n//                        Authorization: `Bearer ${newTokens.accessToken}`,\n//                    },\n//                });\n//                return retryResponse.data;\n//            } catch (refreshError) {\n//                alert(\"토큰이 만료되었습니다. 다시 로그인 해주세요\");\n//                throw refreshError;\n//            }\n//        }else{\n//            throw error;\n//        }\n//    }\n//};\n\nexport const getMyPage = (token) => {\n    const authAxios = getAuthAxios(token);\n    const result = authAxios.get(\"/accounts/mypage\");\n    return result;\n};\n\nexport const getNewRefreshToken = async () => {\n    try {\n        const accessToken = localStorage.getItem(\"access\");\n        const refreshToken = localStorage.getItem(\"refresh\");\n\n        const result = await axios.post(\n            `${baseURL}/accounts/refresh`,\n            {\n                refreshToken,\n            },\n            {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                },\n            }\n        )\n            return result.data;\n    } catch (error) {\n        alert(\"토큰이 만료되었습니다. 다시 로그인 해주세요.\")\n    }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,aAAa;AAE1C,MAAMC,OAAO,GAAG,6BAA6B;AAC7C;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,EAAE,EAAEC,EAAE,EAAEC,IAAI,EAAEC,GAAG,KAAK;EAC/C,MAAMC,MAAM,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,OAAO,mBAAmB,EAAE;IAC3DE,EAAE;IACFC,EAAE;IACFC,IAAI;IACJC;EACJ,CAAC,CAAC;EACF,OAAOC,MAAM;AACjB,CAAC;AAED,OAAO,MAAME,KAAK,GAAG,MAAAA,CAAON,EAAE,EAAEC,EAAE,KAAK;EACnC,MAAMG,MAAM,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,OAAO,kBAAkB,EAAE;IAC1DE,EAAE;IACFC;EACJ,CAAC,CAAC;EACF;EACA,OAAOG,MAAM,CAACG,IAAI;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAChC,MAAMC,SAAS,GAAGb,YAAY,CAACY,KAAK,CAAC;EACrC,MAAML,MAAM,GAAGM,SAAS,CAACC,GAAG,CAAC,kBAAkB,CAAC;EAChD,OAAOP,MAAM;AACjB,CAAC;AAED,OAAO,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAClD,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAEpD,MAAMX,MAAM,GAAG,MAAMR,KAAK,CAACS,IAAI,CAC3B,GAAGP,OAAO,mBAAmB,EAC7B;MACIkB;IACJ,CAAC,EACD;MACIC,OAAO,EAAE;QACLC,aAAa,EAAE,UAAUL,WAAW;MACxC;IACJ,CACJ,CAAC;IACG,OAAOT,MAAM,CAACG,IAAI;EAC1B,CAAC,CAAC,OAAOY,KAAK,EAAE;IACZC,KAAK,CAAC,2BAA2B,CAAC;EACtC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}