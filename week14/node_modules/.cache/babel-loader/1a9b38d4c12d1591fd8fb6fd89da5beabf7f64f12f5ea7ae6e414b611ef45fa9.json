{"ast":null,"code":"//authAxios.js\n\nimport axios from \"axios\";\nimport { getNewRefreshToken } from \"./user\";\nexport const getAuthAxios = token => {\n  const authAxios = axios.create({\n    baseURL: \"https://likelion-cau.r-e.kr\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  authAxios.interceptors.response.use(response => response.data,\n  // 응답이 잘 왔으면 받은 응답을 반환\n\n  async error => {\n    const originalRequest = error.config;\n\n    // 이미 refresh 요청이었는데 실패 → 무한루프 방지\n    if (originalRequest.url.includes(\"/accounts/refresh\")) {\n      // ✅ 여기에서만 alert 수행해도 돼 (단 한 번만 발생 보장)\n      alert(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\n      localStorage.removeItem(\"access\");\n      localStorage.removeItem(\"refresh\");\n      throw error;\n    }\n    try {\n      // 에러가 발생했을 때 아래 코드들을 실행 > 과제1추가 비동기 await 빠져있음\n      const result = await getNewRefreshToken();\n      error.config.headers.Authorization = result.accessToken;\n      // 오류가 발생한 요청을 했을 때, 헤더에 담아서 보낸 토큰을 새 토큰으로 변경\n      localStorage.setItem(\"accessToken\", result.accessToken);\n      localStorage.setItem(\"refreshToken\", result.refreshToken);\n      return (await axios.get(error.config.url, error.config)).data;\n      //에러가 발생한 요청의 url을 그대로 가져와서 사용하고, 필요한 데이터들은\n      //error.config 객체 내에 담겨있기 때문에 그대로 다시 가져와서 get 요청\n    } catch (refreshError) {\n      throw refreshError;\n    }\n  });\n  return authAxios;\n};","map":{"version":3,"names":["axios","getNewRefreshToken","getAuthAxios","token","authAxios","create","baseURL","headers","Authorization","interceptors","response","use","data","error","originalRequest","config","url","includes","alert","localStorage","removeItem","result","accessToken","setItem","refreshToken","get","refreshError"],"sources":["/Users/jeong-geon/Desktop/FrontEnd_Study/Likelion13th-git/week14/src/apis/authAxios.js"],"sourcesContent":["//authAxios.js\n\nimport axios from \"axios\";\nimport { getNewRefreshToken } from \"./user\";\n\nexport const getAuthAxios = (token) => {\n  const authAxios = axios.create({\n    baseURL: \"https://likelion-cau.r-e.kr\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  authAxios.interceptors.response.use(\n    (response) => response.data, // 응답이 잘 왔으면 받은 응답을 반환\n    \n    async (error) => {\n        const originalRequest = error.config;\n\n        // 이미 refresh 요청이었는데 실패 → 무한루프 방지\n        if (originalRequest.url.includes(\"/accounts/refresh\")) {\n        // ✅ 여기에서만 alert 수행해도 돼 (단 한 번만 발생 보장)\n        alert(\"세션이 만료되었습니다. 다시 로그인해주세요.\");\n        localStorage.removeItem(\"access\");\n        localStorage.removeItem(\"refresh\");\n        throw error;\n        }\n\n        try{\n            // 에러가 발생했을 때 아래 코드들을 실행 > 과제1추가 비동기 await 빠져있음\n            const result = await getNewRefreshToken();\n            error.config.headers.Authorization = result.accessToken;\n            // 오류가 발생한 요청을 했을 때, 헤더에 담아서 보낸 토큰을 새 토큰으로 변경\n            localStorage.setItem(\"accessToken\", result.accessToken);\n            localStorage.setItem(\"refreshToken\", result.refreshToken);\n            return (await axios.get(error.config.url, error.config)).data;\n            //에러가 발생한 요청의 url을 그대로 가져와서 사용하고, 필요한 데이터들은\n            //error.config 객체 내에 담겨있기 때문에 그대로 다시 가져와서 get 요청\n        } catch (refreshError){\n            throw refreshError;\n        }\n    }\n  );\n  return authAxios;\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,QAAQ,QAAQ;AAE3C,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACrC,MAAMC,SAAS,GAAGJ,KAAK,CAACK,MAAM,CAAC;IAC7BC,OAAO,EAAE,6BAA6B;IACtCC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUL,KAAK;IAChC;EACF,CAAC,CAAC;EACFC,SAAS,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAChCD,QAAQ,IAAKA,QAAQ,CAACE,IAAI;EAAE;;EAE7B,MAAOC,KAAK,IAAK;IACb,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM;;IAEpC;IACA,IAAID,eAAe,CAACE,GAAG,CAACC,QAAQ,CAAC,mBAAmB,CAAC,EAAE;MACvD;MACAC,KAAK,CAAC,0BAA0B,CAAC;MACjCC,YAAY,CAACC,UAAU,CAAC,QAAQ,CAAC;MACjCD,YAAY,CAACC,UAAU,CAAC,SAAS,CAAC;MAClC,MAAMP,KAAK;IACX;IAEA,IAAG;MACC;MACA,MAAMQ,MAAM,GAAG,MAAMpB,kBAAkB,CAAC,CAAC;MACzCY,KAAK,CAACE,MAAM,CAACR,OAAO,CAACC,aAAa,GAAGa,MAAM,CAACC,WAAW;MACvD;MACAH,YAAY,CAACI,OAAO,CAAC,aAAa,EAAEF,MAAM,CAACC,WAAW,CAAC;MACvDH,YAAY,CAACI,OAAO,CAAC,cAAc,EAAEF,MAAM,CAACG,YAAY,CAAC;MACzD,OAAO,CAAC,MAAMxB,KAAK,CAACyB,GAAG,CAACZ,KAAK,CAACE,MAAM,CAACC,GAAG,EAAEH,KAAK,CAACE,MAAM,CAAC,EAAEH,IAAI;MAC7D;MACA;IACJ,CAAC,CAAC,OAAOc,YAAY,EAAC;MAClB,MAAMA,YAAY;IACtB;EACJ,CACF,CAAC;EACD,OAAOtB,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}